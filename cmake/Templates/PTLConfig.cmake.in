#------------------------------------------------------------------------------#
#
#
cmake_policy(SET CMP0012 NEW)

get_filename_component(PTL_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)

include(${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@ConfigVersion.cmake)
include(CMakeFindDependencyMacro)

set(_PTL_AVAILABLE_COMPONENTS )

if(@BUILD_SHARED_LIBS@)
    list(APPEND _PTL_AVAILABLE_COMPONENTS shared)
endif()

if(@BUILD_STATIC_LIBS@)
    list(APPEND _PTL_AVAILABLE_COMPONENTS static)
endif()

#------------------------------------------------------------------------------#
#   package initialization
#
@PACKAGE_INIT@


#------------------------------------------------------------------------------#
#   install or build tree
#
if("${CMAKE_SOURCE_DIR}" STREQUAL "@CMAKE_SOURCE_DIR@")
    set(_PTL_BUILD_TREE ON)
else()
    set(_PTL_INSTALL_TREE ON)
endif()


#------------------------------------------------------------------------------#
#   configure lib and include
#
if(_PTL_INSTALL_TREE)

    set_and_check(@PROJECT_NAME@_INCLUDE_DIR "@PACKAGE_INCLUDE_INSTALL_DIR@")
    set_and_check(@PROJECT_NAME@_LIB_DIR "@PACKAGE_LIB_INSTALL_DIR@")

    include(${PTL_CMAKE_DIR}/@PROJECT_NAME@Targets.cmake)
    check_required_components(@PROJECT_NAME@)

    # get imported location
    string(TOUPPER "${CMAKE_BUILD_TYPE}" _BUILD_TYPE)
    if("${CMAKE_BUILD_TYPE}" MATCHES "${CMAKE_CONFIGURATION_TYPES}")
        set(IMPORTED_LOCATION_BUILD IMPORTED_LOCATION_${_BUILD_TYPE})
    else("${CMAKE_BUILD_TYPE}" MATCHES "${CMAKE_CONFIGURATION_TYPES}")
        set(IMPORTED_LOCATION_BUILD )
    endif("${CMAKE_BUILD_TYPE}" MATCHES "${CMAKE_CONFIGURATION_TYPES}")

    # set places to look
    set(LOCATIONS IMPORTED_LOCATION ${IMPORTED_LOCATION_BUILD}
        IMPORTED_LOCATION_RELEASE IMPORTED_LOCATION_RELWITHDEBINFO
        IMPORTED_LOCATION_DEBUG IMPORTED_LOCATION_MINSIZEREL)

    # get target
    foreach(_LOC ${LOCATIONS})
        foreach(_COMPONENT ${_PTL_AVAILABLE_COMPONENTS})
            # get location
            if(NOT _${_COMPONENT}_LOCATION)
                get_target_property(_${_COMPONENT}_LOCATION @LIBNAME@-${_COMPONENT} ${_LOC})
            endif(NOT _${_COMPONENT}_LOCATION)
            # set the library
            if(NOT @PROJECT_NAME@_LIBRARY)
                set(@PROJECT_NAME@_LIBRARY ${_${_COMPONENT}_LOCATION} CACHE INTERNAL "@PROJECT_NAME@ library")
            endif(NOT @PROJECT_NAME@_LIBRARY)
        endforeach()
    endforeach()

else(_PTL_INSTALL_TREE)

    set(@PROJECT_NAME@_INCLUDE_DIR "@PROJECT_SOURCE_DIR@/source")
    set(@PROJECT_NAME@_LIB_DIR "@PROJECT_BINARY_DIR@")

    foreach(_COMPONENT ${_PTL_AVAILABLE_COMPONENTS})
        # set the library
        if(NOT @PROJECT_NAME@_LIBRARY)
            set(@PROJECT_NAME@_LIBRARY @LIBNAME@-${_COMPONENT})
        endif(NOT @PROJECT_NAME@_LIBRARY)
        set_property(TARGET @LIBNAME@-${_COMPONENT} PROPERTY
            IMPORTED_LOCATION "${CMAKE_BINARY_DIR}/${PROJECT_NAME}-${_COMPONENT}.cmake")
        set(PROJECT_DEPENDS @LIBNAME@-${_COMPONENT})
    endforeach()

    set(PROJECT_DEPENDS ${@PROJECT_NAME@_LIBRARY})

endif(_PTL_INSTALL_TREE)


#------------------------------------------------------------------------------#
# internal PTL include directory
#
set(@PROJECT_NAME@_INCLUDE_DIRS ${@PROJECT_NAME@_INCLUDE_DIR})


#------------------------------------------------------------------------------#
#   CXX standard
#
if(DEFINED CMAKE_CXX_STANDARD)
    if("${CMAKE_CXX_STANDARD}" VERSION_LESS 11)
        set(CMAKE_CXX_STANDARD 11)
        set(CMAKE_CXX_STANDARD_REQUIRED ON)
    endif()
else(DEFINED CMAKE_CXX_STANDARD)
    set(CMAKE_CXX_STANDARD @CMAKE_CXX_STANDARD@)
endif(DEFINED CMAKE_CXX_STANDARD)

set(CMAKE_CXX_STANDARD_REQUIRED ON)


#------------------------------------------------------------------------------#
#   Linking type
#
if(WIN32)
    add_definitions(-D_PTL_ARCHIVE)
endif(WIN32)


#------------------------------------------------------------------------------#
#   link target
#
set(@PROJECT_NAME@_LIBRARIES ${@PROJECT_NAME@_LIBRARY})


#------------------------------------------------------------------------------#
#   Definitions
#
set(PTL_USE_TIMEMORY @PTL_USE_TIMEMORY@)
set(PTL_USE_GPERF @PTL_USE_GPERF@)
set(PTL_USE_TBB @PTL_USE_TBB@)
set(PTL_USE_GPU @PTL_USE_GPU@)
set(PTL_USE_CUDA @PTL_USE_CUDA@)
set(PTL_USE_ITTNOTIFY @PTL_USE_ITTNOTIFY@)

if(_PTL_INSTALL_TREE)
    list(APPEND CMAKE_MODULE_PATH ${PTL_CMAKE_DIR})
    include("${PTL_CMAKE_DIR}/Packages.cmake")
    list(APPEND @PROJECT_NAME@_LIBRARIES ${EXTERNAL_LIBRARIES})
else()
    list(APPEND @PROJECT_NAME@_LIBRARIES "@EXTERNAL_LIBRARIES@")
endif()

#------------------------------------------------------------------------------#
#   find_package variables
#
include(FindPackageHandleStandardArgs)
# handle the QUIETLY and REQUIRED arguments and set UnitTest++_FOUND to TRUE
# if all listed variables are TRUE
find_package_handle_standard_args(@PROJECT_NAME@ DEFAULT_MSG
    @PROJECT_NAME@_CMAKE_DIR
    @PROJECT_NAME@_LIBRARIES
    @PROJECT_NAME@_INCLUDE_DIRS)
